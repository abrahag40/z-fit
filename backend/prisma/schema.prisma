generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// ====================== ENUMS ======================
//

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

enum PaymentMethod {
  CASH
  CARD
  TRANSFER
  STRIPE
  CONEKTA
  OPENPAY
}

enum Role {
  ADMIN
  STAFF
  CLIENT
}

enum MembershipStatus {
  ACTIVE
  EXPIRED
  FROZEN
  CANCELLED
}

enum CheckinStatus {
  ALLOWED
  DENIED
}

//
// ====================== MODELOS ======================
//

/// üí∞ Planes de membres√≠a base (ej. B√°sico, Premium, Anual)
model MembershipPlan {
  id           String       @id @default(cuid())
  name         String
  price        Decimal      @db.Decimal(10, 2)
  currency     String       @default("MXN")
  durationDays Int          @default(30)
  active       Boolean      @default(true)

  memberships  Membership[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([active])
  @@index([name])
}

/// üíµ Pagos registrados (manuales o autom√°ticos)
model Payment {
  id            String         @id @default(cuid())
  userId        String
  membershipId  String?
  amount        Decimal        @db.Decimal(10, 2)
  currency      String         @default("MXN")
  status        PaymentStatus  @default(PAID)
  method        PaymentMethod
  reference     String?
  paidAt        DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  membership    Membership?    @relation(fields: [membershipId], references: [id])

  @@index([status, paidAt])
  @@index([userId])
  @@index([membershipId])
}

/// üë§ Usuarios del sistema (admin, staff, cliente)
model User {
  id             String        @id @default(cuid())
  email          String        @unique
  name           String?
  passwordHash   String
  role           Role          @default(CLIENT)
  isActive       Boolean       @default(true)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastLoginAt    DateTime?

  memberships    Membership[]  // 1:N
  checkins       Checkin[]     // 1:N
  payments       Payment[]     // 1:N
}

/// üèãÔ∏è Membres√≠as activas o hist√≥ricas de usuarios
model Membership {
  id             String           @id @default(cuid())
  userId         String
  status         MembershipStatus
  startDate      DateTime
  endDate        DateTime
  planId         String?
  priceSnapshot  Decimal?         @db.Decimal(10, 2)
  currency       String           @default("MXN")

  user           User             @relation(fields: [userId], references: [id])
  plan           MembershipPlan?  @relation(fields: [planId], references: [id])
  checkins       Checkin[]
  payments       Payment[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@index([status, endDate])
  @@index([userId])
  @@index([planId])
}

/// üïí Registro de accesos y asistencias
model Checkin {
  id            String         @id @default(cuid())
  userId        String
  membershipId  String?
  timestamp     DateTime       @default(now())
  status        CheckinStatus  @default(ALLOWED)
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  membership    Membership?    @relation(fields: [membershipId], references: [id])

  @@index([userId])
  @@index([membershipId])
  @@map("checkins")
}
